// Automatically generated by MockGen. DO NOT EDIT!
// Source: common/interfaces.go

package common

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of PersistenceAdapter interface
type MockPersistenceAdapter struct {
	ctrl     *gomock.Controller
	recorder *_MockPersistenceAdapterRecorder
}

// Recorder for MockPersistenceAdapter (not exported)
type _MockPersistenceAdapterRecorder struct {
	mock *MockPersistenceAdapter
}

func NewMockPersistenceAdapter(ctrl *gomock.Controller) *MockPersistenceAdapter {
	mock := &MockPersistenceAdapter{ctrl: ctrl}
	mock.recorder = &_MockPersistenceAdapterRecorder{mock}
	return mock
}

func (_m *MockPersistenceAdapter) EXPECT() *_MockPersistenceAdapterRecorder {
	return _m.recorder
}

func (_m *MockPersistenceAdapter) Persist(msg Message) (string, error) {
	ret := _m.ctrl.Call(_m, "Persist", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPersistenceAdapterRecorder) Persist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Persist", arg0)
}

func (_m *MockPersistenceAdapter) Update(msg Message) error {
	ret := _m.ctrl.Call(_m, "Update", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPersistenceAdapterRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

func (_m *MockPersistenceAdapter) Delete(id string) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockPersistenceAdapterRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

// Mock of Persister interface
type MockPersister struct {
	ctrl     *gomock.Controller
	recorder *_MockPersisterRecorder
}

// Recorder for MockPersister (not exported)
type _MockPersisterRecorder struct {
	mock *MockPersister
}

func NewMockPersister(ctrl *gomock.Controller) *MockPersister {
	mock := &MockPersister{ctrl: ctrl}
	mock.recorder = &_MockPersisterRecorder{mock}
	return mock
}

func (_m *MockPersister) EXPECT() *_MockPersisterRecorder {
	return _m.recorder
}

func (_m *MockPersister) Persist(msg Message) (string, error) {
	ret := _m.ctrl.Call(_m, "Persist", msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockPersisterRecorder) Persist(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Persist", arg0)
}

// Mock of Updater interface
type MockUpdater struct {
	ctrl     *gomock.Controller
	recorder *_MockUpdaterRecorder
}

// Recorder for MockUpdater (not exported)
type _MockUpdaterRecorder struct {
	mock *MockUpdater
}

func NewMockUpdater(ctrl *gomock.Controller) *MockUpdater {
	mock := &MockUpdater{ctrl: ctrl}
	mock.recorder = &_MockUpdaterRecorder{mock}
	return mock
}

func (_m *MockUpdater) EXPECT() *_MockUpdaterRecorder {
	return _m.recorder
}

func (_m *MockUpdater) Update(msg Message) error {
	ret := _m.ctrl.Call(_m, "Update", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockUpdaterRecorder) Update(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Update", arg0)
}

// Mock of Deleter interface
type MockDeleter struct {
	ctrl     *gomock.Controller
	recorder *_MockDeleterRecorder
}

// Recorder for MockDeleter (not exported)
type _MockDeleterRecorder struct {
	mock *MockDeleter
}

func NewMockDeleter(ctrl *gomock.Controller) *MockDeleter {
	mock := &MockDeleter{ctrl: ctrl}
	mock.recorder = &_MockDeleterRecorder{mock}
	return mock
}

func (_m *MockDeleter) EXPECT() *_MockDeleterRecorder {
	return _m.recorder
}

func (_m *MockDeleter) Delete(id string) error {
	ret := _m.ctrl.Call(_m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockDeleterRecorder) Delete(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Delete", arg0)
}

// Mock of Searcher interface
type MockSearcher struct {
	ctrl     *gomock.Controller
	recorder *_MockSearcherRecorder
}

// Recorder for MockSearcher (not exported)
type _MockSearcherRecorder struct {
	mock *MockSearcher
}

func NewMockSearcher(ctrl *gomock.Controller) *MockSearcher {
	mock := &MockSearcher{ctrl: ctrl}
	mock.recorder = &_MockSearcherRecorder{mock}
	return mock
}

func (_m *MockSearcher) EXPECT() *_MockSearcherRecorder {
	return _m.recorder
}

func (_m *MockSearcher) SearchByUser(user string) []Message {
	ret := _m.ctrl.Call(_m, "SearchByUser", user)
	ret0, _ := ret[0].([]Message)
	return ret0
}

func (_mr *_MockSearcherRecorder) SearchByUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchByUser", arg0)
}

func (_m *MockSearcher) SearchByOrganization(organization string) []Message {
	ret := _m.ctrl.Call(_m, "SearchByOrganization", organization)
	ret0, _ := ret[0].([]Message)
	return ret0
}

func (_mr *_MockSearcherRecorder) SearchByOrganization(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchByOrganization", arg0)
}

func (_m *MockSearcher) SearchByProject(organization string) []Message {
	ret := _m.ctrl.Call(_m, "SearchByProject", organization)
	ret0, _ := ret[0].([]Message)
	return ret0
}

func (_mr *_MockSearcherRecorder) SearchByProject(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "SearchByProject", arg0)
}
